<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>스마트여행가이드</title>
  <link href="https://fonts.googleapis.com/css2?family=Pacifico&family=Noto+Sans+KR:wght@300;400;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary-color: #5ac8fa; /* 밝은 파랑 */
      --secondary-color: #007aff; /* 진한 파랑 */
      --accent-color: #ffcc00; /* 노랑 */
      --text-color: #333;
      --bg-gradient-start: #87CEEB; /* 스카이 블루 */
      --bg-gradient-end: #ADD8E6; /* 라이트 스틸 블루 */
      --card-bg: rgba(255, 255, 255, 0.9);
      --shadow-light: 0 4px 15px rgba(0, 0, 0, 0.1);
      --border-radius: 12px;
    }

    body {
      font-family: 'Noto Sans KR', sans-serif;
      margin: 0;
      padding: 0;
      background: linear-gradient(135deg, var(--bg-gradient-start) 0%, var(--bg-gradient-end) 100%);
      color: var(--text-color);
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
      box-sizing: border-box;
    }

    .container {
      background-color: var(--card-bg);
      padding: 35px 45px;
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-light);
      max-width: 800px;
      width: 90%;
      margin: 40px auto;
      text-align: center;
      transition: all 0.3s ease;
      position: relative; /* 로딩 스피너 위치 기준 */
      overflow: hidden; /* 로딩 스피너 오버플로우 숨김 */
    }

    h1 {
      font-family: 'Pacifico', cursive;
      color: var(--secondary-color);
      font-size: 2.8em;
      margin-bottom: 25px;
      text-shadow: 2px 2px 5px rgba(0,0,0,0.1);
    }

    .input-section {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
      gap: 20px;
      margin-bottom: 30px;
    }

    .input-group {
      text-align: left;
    }

    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 700;
      color: var(--secondary-color);
    }

    input[type="text"],
    select {
      width: calc(100% - 20px); /* 패딩 고려 */
      padding: 12px 10px;
      border: 1px solid var(--primary-color);
      border-radius: 8px;
      font-size: 1em;
      box-sizing: border-box;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
      background-color: white;
    }

    input[type="text"]:focus,
    select:focus {
      border-color: var(--accent-color);
      box-shadow: 0 0 8px rgba(255, 204, 0, 0.3); /* CSS 변수 직접 사용 */
      outline: none;
    }

    .radio-group {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      margin-top: 5px;
    }

    .radio-group label {
      display: inline-flex;
      align-items: center;
      cursor: pointer;
      font-weight: 400;
      color: var(--text-color);
    }

    .radio-group input[type="radio"] {
      margin-right: 8px;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      width: 20px;
      height: 20px;
      border: 2px solid var(--primary-color);
      border-radius: 50%;
      outline: none;
      transition: border-color 0.3s ease, background-color 0.3s ease;
      cursor: pointer;
    }

    .radio-group input[type="radio"]:checked {
      border-color: var(--secondary-color);
      background-color: var(--primary-color);
      box-shadow: inset 0 0 0 5px white; /* 중앙 원 */
    }

    button {
      background-color: var(--secondary-color);
      color: white;
      padding: 15px 30px;
      border: none;
      border-radius: 8px;
      font-size: 1.2em;
      font-weight: 700;
      cursor: pointer;
      transition: background-color 0.3s ease, transform 0.2s ease;
      margin-top: 25px;
      box-shadow: var(--shadow-light);
    }

    button:hover {
      background-color: var(--primary-color);
      transform: translateY(-2px);
    }

    button:active {
      transform: translateY(0);
    }

    .loading-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(255, 255, 255, 0.8);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      border-radius: var(--border-radius);
      z-index: 10;
      opacity: 0;
      visibility: hidden;
      transition: opacity 0.3s ease, visibility 0.3s ease;
    }

    .loading-overlay.show {
      opacity: 1;
      visibility: visible;
    }

    .spinner {
      border: 8px solid var(--primary-color);
      border-top: 8px solid var(--secondary-color);
      border-radius: 50%;
      width: 60px;
      height: 60px;
      animation: spin 1s linear infinite;
      margin-bottom: 20px;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .loading-text {
      font-size: 1.3em;
      color: var(--secondary-color);
      font-weight: 700;
    }

    #results-section {
      margin-top: 40px;
      text-align: left;
      opacity: 0;
      transform: translateY(20px);
      transition: opacity 0.5s ease, transform 0.5s ease;
    }

    #results-section.show {
      opacity: 1;
      transform: translateY(0);
    }

    #results-section h2 {
      font-size: 2em;
      color: var(--secondary-color);
      margin-bottom: 20px;
      text-align: center;
    }

    .itinerary-card {
      background-color: white;
      padding: 25px;
      border-radius: var(--border-radius);
      box-shadow: var(--shadow-light);
      margin-bottom: 25px;
      line-height: 1.6;
      border: 1px solid var(--primary-color);
      white-space: pre-wrap; /* 줄바꿈, 공백 유지 */
    }

    .itinerary-card h3 {
      color: var(--secondary-color);
      font-size: 1.5em;
      margin-bottom: 10px;
      border-bottom: 2px solid var(--primary-color);
      padding-bottom: 8px;
    }

    .itinerary-card p {
      margin-bottom: 10px;
    }

    #reloadButton {
      background-color: var(--accent-color);
      color: var(--text-color);
      margin-top: 20px;
      box-shadow: none; /* 그림자 제거 */
    }

    #reloadButton:hover {
      background-color: #FFD700; /* 조금 더 진한 노랑 */
    }

    @media (max-width: 768px) {
      .container {
        padding: 25px 30px;
        margin: 20px auto;
      }
      h1 {
        font-size: 2.2em;
      }
      .input-section {
        grid-template-columns: 1fr; /* 모바일에서 한 줄로 정렬 */
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>스마트여행가이드</h1>

    <div id="inputForm">
      <div class="input-section">
        <div class="input-group">
          <label for="destination">여행할 나라, 지역 또는 도시를 입력해주세요.</label>
          <input type="text" id="destination" placeholder="예: 파리, 제주도, 뉴욕">
        </div>

        <div class="input-group">
          <label for="numTravelers">여행 인원수:</label>
          <select id="numTravelers">
            <option value="1명">1명</option>
            <option value="2명">2명</option>
            <option value="3명">3명</option>
            <option value="4명">4명</option>
            <option value="5명">5명</option>
            <option value="6명">6명</option>
            <option value="7명">7명</option>
            <option value="8명">8명</option>
            <option value="9명">9명</option>
            <option value="10명 이상">10명 이상</option>
          </select>
        </div>

        <div class="input-group">
          <label>성별:</label>
          <div class="radio-group">
            <label><input type="radio" name="gender" value="남성" checked> 남성</label>
            <label><input type="radio" name="gender" value="여성"> 여성</label>
            <label><input type="radio" name="gender" value="혼성"> 혼성</label>
          </div>
        </div>

        <div class="input-group">
          <label for="ageGroup">나이:</label>
          <select id="ageGroup">
            <option value="10대">10대</option>
            <option value="20대">20대</option>
            <option value="30대">30대</option>
            <option value="40대">40대</option>
            <option value="50대 이상">50대 이상</option>
          </select>
        </div>

        <div class="input-group">
          <label for="travelStyle">여행 스타일:</label>
          <select id="travelStyle">
            <option value="휴양지">휴양지</option>
            <option value="커플여행">커플여행</option>
            <option value="가족여행">가족여행</option>
            <option value="혼자여행">혼자여행</option>
            <option value="친구여행">친구여행</option>
            <option value="액티비티">액티비티</option>
            <option value="문화유적">문화유적</option>
          </select>
        </div>

        <div class="input-group">
          <label for="travelDays">여행 일수:</label>
          <select id="travelDays">
            <option value="1일">1일</option>
            <option value="2일">2일</option>
            <option value="3일">3일</option>
            <option value="4일">4일</option>
            <option value="5일">5일</option>
            <option value="6일">6일</option>
            <option value="7일">7일</option>
          </select>
        </div>

        <div class="input-group">
          <label>예산 규모 (인당):</label>
          <div class="radio-group">
            <label><input type="radio" name="budget" value="100만원 미만" checked> 100만원 미만</label>
            <label><input type="radio" name="budget" value="100만원~200만원"> 100만원~200만원</label>
            <label><input type="radio" name="budget" value="200만원~300만원"> 200만원~300만원</label>
            <label><input type="radio" name="budget" value="300만원 이상"> 300만원 이상</label>
          </div>
        </div>
      </div>

      <button id="recommendButton">여행 경로 추천</button>
    </div>

    <div class="loading-overlay" id="loadingOverlay">
      <div class="spinner"></div>
      <div class="loading-text">즐거운 여행 경로를 추천 중입니다...</div>
    </div>

    <div id="results-section">
      <h2>✨ 추천 여행 경로 ✨</h2>
      <div id="itineraryResults">
        </div>
      <button id="reloadButton">다시 검색하기</button>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const recommendButton = document.getElementById('recommendButton');
      const reloadButton = document.getElementById('reloadButton');
      const loadingOverlay = document.getElementById('loadingOverlay');
      const inputForm = document.getElementById('inputForm');
      const resultsSection = document.getElementById('results-section');
      const itineraryResults = document.getElementById('itineraryResults');

      // 초기 상태: 결과 섹션 숨기기
      resultsSection.style.display = 'none';

      recommendButton.addEventListener('click', async function() {
        const destination = document.getElementById('destination').value.trim();
        if (!destination) {
          alert('여행할 나라, 지역 또는 도시를 입력해주세요.');
          return;
        }

        const formData = {
          destination: destination,
          numTravelers: document.getElementById('numTravelers').value,
          gender: document.querySelector('input[name="gender"]:checked').value,
          ageGroup: document.getElementById('ageGroup').value,
          travelStyle: document.getElementById('travelStyle').value,
          travelDays: document.getElementById('travelDays').value,
          budget: document.querySelector('input[name="budget"]:checked').value
        };

        // 로딩 스피너 표시
        loadingOverlay.classList.add('show');
        inputForm.style.pointerEvents = 'none'; // 입력 폼 비활성화
        recommendButton.disabled = true; // 버튼 비활성화

        try {
          const response = await fetch('/api/recommend-itinerary', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
          });

          const data = await response.json();

          if (data.success) {
            displayItinerary(data.itinerary);
            inputForm.style.display = 'none'; // 입력 폼 숨기기
            resultsSection.style.display = 'block'; // 결과 섹션 보이기
            setTimeout(() => resultsSection.classList.add('show'), 50); // 애니메이션 적용
          } else {
            alert('여행 경로 추천에 실패했습니다: ' + data.error);
            // 실패 시에도 입력 폼 유지
          }
        } catch (error) {
          alert('서버와 통신 중 오류가 발생했습니다: ' + error.message);
        } finally {
          loadingOverlay.classList.remove('show');
          inputForm.style.pointerEvents = 'auto'; // 입력 폼 활성화
          recommendButton.disabled = false; // 버튼 활성화
        }
      });

      reloadButton.addEventListener('click', function() {
        // 결과 섹션 숨기고 입력 폼 다시 보여주기
        resultsSection.classList.remove('show');
        setTimeout(() => {
          resultsSection.style.display = 'none';
          inputForm.style.display = 'block';
          itineraryResults.innerHTML = ''; // 결과 내용 비우기
          document.getElementById('destination').value = ''; // 목적지 초기화
          document.getElementById('numTravelers').value = '1명';
          document.querySelector('input[name="gender"][value="남성"]').checked = true;
          document.getElementById('ageGroup').value = '10대';
          document.getElementById('travelStyle').value = '휴양지';
          document.getElementById('travelDays').value = '1일';
          document.querySelector('input[name="budget"][value="100만원 미만"]').checked = true;

        }, 500); // 애니메이션 시간 후 숨기기
      });

      /**
       * Gemini API 응답을 파싱하여 카드 형태로 표시합니다.
       * @param {string} itineraryText Gemini API에서 반환된 원본 텍스트
       */
      function displayItinerary(itineraryText) {
        itineraryResults.innerHTML = ''; // 기존 결과 초기화

        // 각 일자별 경로를 분리 (---로 구분된 부분)
        const days = itineraryText.split('---').filter(day => day.trim() !== '');

        if (days.length > 0) {
            days.forEach(dayContent => {
                const card = document.createElement('div');
                card.classList.add('itinerary-card');

                // Day N: [제목] 추출 및 h3 태그로
                const firstLineBreak = dayContent.indexOf('\n');
                let title = dayContent.trim();
                let body = '';

                if (firstLineBreak !== -1) {
                    title = dayContent.substring(0, firstLineBreak).trim();
                    body = dayContent.substring(firstLineBreak + 1).trim();
                }

                // "Day N:"으로 시작하는 제목이 아니라면 그냥 첫 줄을 제목으로
                if (!title.toLowerCase().startsWith('day')) {
                  const tempDiv = document.createElement('div');
                  tempDiv.innerHTML = dayContent.trim(); // `pre-wrap` 스타일이 줄바꿈 처리
                  card.appendChild(tempDiv);
                } else {
                    const h3 = document.createElement('h3');
                    h3.textContent = title.replace(/^-/, '').trim(); // 시작의 '-' 제거
                    card.appendChild(h3);

                    const p = document.createElement('p');
                    p.textContent = body; // `pre-wrap` 스타일이 줄바꿈 처리
                    card.appendChild(p);
                }
                itineraryResults.appendChild(card);
            });
        } else {
            // "---" 구분자가 없거나 파싱할 내용이 없는 경우 전체 텍스트를 하나의 카드로 표시
            const card = document.createElement('div');
            card.classList.add('itinerary-card');
            const p = document.createElement('p');
            p.textContent = itineraryText;
            card.appendChild(p);
            itineraryResults.appendChild(card);
        }
      }
    });
  </script>
</body>
</html>